// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

//3의 배수만 들어갈 수 있는 array를 구현하세요.
contract q1 {
    uint[] public MultipleofThree;

    function array(uint _n) public {
        require(_n % 3 == 0);
        MultipleofThree.push(_n);
    }

    function getarray() public view returns (uint[] memory) {
        return MultipleofThree;
    }
}

//뺄셈 함수를 구현하세요. 임의의 두 숫자를 넣으면 자동으로 둘 중 큰수로부터 작은 수를 빼는 함수를 구현
contract q2 {
    function subtract(uint _a, uint _b) public pure returns (uint _n) {
        if (_a > _b) {
            return _a - _b;
        } else if ( _b > _a) {
            return _b - _a;
        }
    }

}
//5의 배수라면 “A”를, 나머지가 1이면 “B”를, 나머지가 2면 “C”를, 나머지가 3이면 “D”, 나미저가 4면 “E”를 반환하는 함수를 구현하세요.
contract q3 {
    function number(uint _n) public pure returns ( string memory ) {
        if(_n%5==0) {
            return "A";
        } else if (_n%5==1) {
            return "B";
        } else if (_n%5==2) {
            return "C";
        } else if (_n%5==3) {
            return "D";
        } else if (_n%5==4) {
            return "E";
        }

    }
}

//string을 input으로 받는 함수를 구현하세요. “Alice”가 들어왔을 때에만 true를 반환하세요.
contract q4 {
    function Alice(string memory input) public pure returns (bool) {
        return keccak256(abi.encodePacked(input)) == keccak256(abi.encodePacked("Alice"));
    }
}

//배열 A를 선언하고 해당 배열에 n부터 0까지 자동으로 넣는 함수를 구현
contract q5 {
    uint[] public arrayA;
    
    function arrayA(uint _n) public {
        for (uint i = n; i >= 0; i--) {
            array.push(i);

        }
    }

    function getarrayA() public view returns(uint[] memory) {
        return arrayA;
    }
}

//홀수만 들어가는 array, 짝수만 들어가는 array를 구현하고 숫자를 넣었을 때 자동으로 홀,짝을 나누어 입력시키는 함수를 구현
contract q6 {
    uint[] public oddNumbers;
    uint[] public evenNumbers;

    function addNumber(uint _n) public {
        if (_n%2==0) {
            evenNumbers.push(_n);
        } else (_n%2==1) {
            oddNumbers.push(_n);
        }
    } 
}


//string 과 bytes32를 key-value 쌍으로 묶어주는 mapping을 구현하세요. 해당 mapping에 정보를 넣고, 지우고 불러오는 함수도 같이 구현
contract q7 {
    mapping ( string => bytes32 ) ;

}

//ID와 PW를 넣으면 해시함수(keccak256)에 둘을 같이 해시값을 반환해주는 함수를 구현하세요.
contract q8 {
    function Hash(string memory ID, string memory PW) public pure returns {
        return keccak256(abi.encodePacked(ID, PW));

    }
}
